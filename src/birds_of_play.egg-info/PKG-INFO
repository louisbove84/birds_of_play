Metadata-Version: 2.4
Name: birds-of-play
Version: 0.1.0
Summary: Motion detection library with Python bindings
Author-email: Birds of Play Team <team@birdsofplay.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/louisbove84/birds_of_play
Project-URL: Repository, https://github.com/louisbove84/birds_of_play.git
Project-URL: Documentation, https://github.com/louisbove84/birds_of_play#readme
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Scientific/Engineering :: Image Processing
Classifier: Topic :: Scientific/Engineering :: Computer Vision
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: pybind11>=3.0.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: opencv-python>=4.5.0
Requires-Dist: pymongo>=4.0.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: scikit-learn>=1.0.0
Requires-Dist: torch>=1.12.0
Requires-Dist: torchvision>=0.13.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: plotly>=5.0.0
Requires-Dist: networkx>=2.8.0
Requires-Dist: umap-learn>=0.5.0
Requires-Dist: Pillow>=8.3.0
Requires-Dist: flask>=2.0.0
Requires-Dist: flask-cors>=3.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=5.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0.0; extra == "docs"
Dynamic: license-file

# Birds of Play: Motion Detection & Object Recognition System

A real-time motion detection and object recognition system built with C++ and OpenCV, featuring web-based visualization and YOLO11 integration.

## 🎯 Features

- **Real-time motion detection** using frame differencing and background subtraction
- **Region consolidation** to group nearby motion areas into optimal detection zones
- **YOLO11 object detection** on consolidated motion regions
- **Web-based interface** with dual viewers for motion and object detection
- **MongoDB integration** for frame storage and detection results
- **Cross-navigation** between motion detection and object detection interfaces
- **Configurable detection thresholds** and object class filtering
- **Comprehensive test suite** with integration testing

## 🚀 Quick Start

### Prerequisites

**macOS (Apple Silicon):**
```bash
brew install cmake opencv yaml-cpp mongodb-community
```

**Ubuntu/Debian:**
```bash
sudo apt install build-essential cmake libopencv-dev libyaml-cpp-dev mongodb
```

### Build and Run

```bash
# Clone the repository
git clone <your-repo-url>
cd birds_of_play

# Build the project
make rebuild

# Install web dependencies
make web-install

# Start MongoDB (if not running)
brew services start mongodb/brew/mongodb-community  # macOS
# or
sudo systemctl start mongod  # Ubuntu

# Start web interfaces
make web-start

# Visit the interfaces
# Motion Detection: http://localhost:3000
# Object Detection: http://localhost:3001
```

## 📁 Project Structure

```
birds_of_play/
├── src/                           # Source code directory
│   ├── main.cpp                  # Main C++ application
│   ├── main.py                   # Python orchestrator (alternative)
│   ├── motion_detection/         # Core motion detection component
│   │   ├── src/                  # Motion detection source files
│   │   ├── include/              # Header files
│   │   ├── tests/                # Test suite
│   │   ├── config.yaml           # Motion detection configuration
│   │   └── CMakeLists.txt        # Component build configuration
│   ├── image_detection/          # Object detection pipeline
│   │   ├── models/               # YOLO11 model files
│   │   │   └── yolo11n.pt       # YOLO11 nano model
│   │   ├── batch_detect_regions.py   # Batch detection processor
│   │   ├── detection_config.yaml     # Detection configuration
│   │   └── *.py                  # Detection utilities
│   └── mongodb/                  # Database utilities and migration tools
├── web/                          # Web interface
│   ├── simple_viewer.js          # Motion detection viewer (port 3000)
│   ├── region_viewer.js          # Object detection viewer (port 3001)
│   └── package.json              # Node.js dependencies
├── data/                         # Generated data
│   ├── frames/                   # Original and processed frames
│   ├── regions/                  # Consolidated region cutouts
│   ├── objects/                  # Individual object crops
│   └── highlighted_frames/       # Frames with highlighted regions
├── build/                        # Build output directory
├── Makefile                      # Simplified build system
└── README.md                     # This file
```

## 🔧 Configuration

### Motion Detection (`src/motion_detection/config.yaml`)

```yaml
motion_detection:
  min_contour_area: 50          # Minimum area for motion detection
  background_subtraction: false  # Enable background subtraction
  gaussian_blur_size: 5         # Blur kernel size
  threshold_value: 30           # Motion detection threshold

region_consolidation:
  max_distance_threshold: 50.0  # Max distance for grouping regions
  ideal_model_region_size: 640  # Optimal size for object detection
  size_tolerance_percent: 30    # Size tolerance for region optimization
```

### Object Detection (`src/image_detection/detection_config.yaml`)

```yaml
detection:
  high_confidence_threshold: 0.93  # Minimum confidence for display

display_classes:
  - "bird"                      # Object classes to detect and display

model:
  type: "yolo11n"              # YOLO11 model variant
  path: "models/yolo11n.pt"    # Model file location
```

## 🌐 Web Interface

The system provides two web interfaces with seamless navigation:

### Motion Detection Viewer (Port 3000)
- View processed frames with motion regions highlighted
- Toggle between processed and original images
- Navigate to object detection results

### Object Detection Viewer (Port 3001)
- View individual detected objects with confidence scores
- See highlighted regions in context of full frames
- Filter by configurable confidence thresholds
- Automatic YOLO11 processing of motion regions

**Navigation:** Click the navigation links at the top of each page to switch between viewers.

## 🧪 Testing

```bash
# Run all tests
make test

# Run specific test suites
make motion-tests              # Motion detection tests
make test-python              # Python bindings tests
make test-detection           # YOLO11 detection pipeline tests

# Build system tests
make rebuild                  # Clean rebuild
make web-start               # Test web interface startup
make web-stop                # Stop web servers
```

## 🎮 Usage

### Video Processing Pipeline

1. **Start the system:**
   ```bash
   make web-start
   ```

2. **Run motion detection** (processes video and saves to MongoDB):
   ```bash
   # Process webcam
   ./build/birds_of_play
   
   # Process video file
   ./build/birds_of_play --video path/to/video.mp4
   ```

3. **View results:**
   - **Motion Detection**: http://localhost:3000
   - **Object Detection**: http://localhost:3001

4. **Object detection** runs automatically when viewing the object detection interface

### Makefile Commands

```bash
# Build system
make build                    # Build the project
make rebuild                  # Clean and rebuild
make clean                    # Remove build artifacts
make deep-clean              # Remove all artifacts including dependencies

# Web interface
make web-install             # Install web dependencies
make web-start               # Start both web servers
make web-stop                # Stop web servers

# Testing
make motion-tests            # Run motion detection tests
make test-python             # Test Python bindings
make test-detection          # Test YOLO11 pipeline
```

## 📊 Performance

- **Processing Speed**: ~3-5ms per frame (1920x1080)
- **Memory Usage**: ~40-50MB for motion detection + ~200MB for YOLO11
- **Detection Accuracy**: 93%+ confidence threshold for bird detection
- **Supported Formats**: Any OpenCV-compatible image/video format
- **Platform Support**: macOS, Linux (Windows untested)

## 🛠️ Development

### Adding New Object Detection Models

1. Place model file in `src/image_detection/models/`
2. Update `detection_config.yaml`:
   ```yaml
   model:
     type: "your_model"
     path: "models/your_model.pt"
   ```
3. Modify `batch_detect_regions.py` if needed for model-specific handling

### Customizing Detection Classes

Edit `src/image_detection/detection_config.yaml`:
```yaml
display_classes:
  - "bird"
  - "cat"
  - "dog"
  # Add more COCO classes as needed

class_aliases:
  bird: "Bird"
  cat: "Cat"
  # Custom display names
```

### Web Interface Customization

- **Motion Detection UI**: Edit `web/simple_viewer.js`
- **Object Detection UI**: Edit `web/region_viewer.js`
- **Navigation**: Both files include cross-navigation links
- **Styling**: CSS is embedded in each JavaScript file

## 🔧 Troubleshooting

### Common Issues

1. **Web servers won't start**: Install dependencies with `make web-install`
2. **No images in web interface**: Ensure MongoDB is running and data exists
3. **YOLO11 model not found**: Check `src/image_detection/models/yolo11n.pt` exists
4. **Detection not working**: Verify Python virtual environment and dependencies

### Debug Commands

```bash
# Check system status
make help                     # Show all available commands
curl http://localhost:3000/api/frames | jq '.frames | length'  # Check frame count
curl http://localhost:3001/api/objects | jq '.objects | length'  # Check detection count

# Check MongoDB
mongosh birds_of_play
> db.captured_frames.countDocuments()
> db.region_detections.countDocuments()
```

## 📄 License

MIT License - see LICENSE.md for details.

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Add tests for new functionality
4. Ensure all tests pass: `make test`
5. Test web interfaces: `make web-start`
6. Submit a pull request

---

*Built with ❤️ for real-time motion detection and object recognition*
