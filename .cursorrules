# =======================================
# Cursor Rules - Modern C++ Project
# =======================================

# ---- Technology Focus ----
technologies:
  - C++17/20
  - CMake
  - OpenCV
  - ONNX Runtime
  - spdlog
  - Filesystem
  - Threading
  - YAML Config

# ---- Code Style ----
code_style:
  - Follow Modern C++ guidelines (C++17/20)
  - Use RAII and smart pointers; avoid raw pointers
  - Prefer references over pointers when possible
  - Use const correctness consistently
  - 4-space indentation
  - snake_case for variables and functions
  - PascalCase for classes and types
  - UPPER_CASE for constants and macros
  - Keep functions focused and under 50 lines
  - Use auto when it aids readability
  - Prefer range-based for loops
  - Use structured bindings where appropriate

# ---- Memory Management ----
memory:
  - Use smart pointers (unique_ptr, shared_ptr)
  - Follow RAII principles
  - Avoid manual memory management
  - Use containers from STL
  - Be explicit about ownership
  - Use move semantics where appropriate

# ---- Error Handling ----
error_handling:
  - Use exceptions for exceptional cases
  - RAII for resource management
  - Strong exception guarantees where possible
  - Clear error messages with context
  - Proper cleanup in destructors
  - Use std::optional for nullable values

# ---- Threading ----
concurrency:
  - Use std::thread, std::mutex, std::lock_guard
  - Prefer high-level abstractions
  - Be explicit about thread safety
  - Use atomic for simple shared state
  - Document thread safety requirements
  - Avoid data races and deadlocks

# ---- Performance ----
performance:
  - Profile before optimizing
  - Use constexpr where possible
  - Consider cache coherency
  - Minimize copying large objects
  - Use references for large parameters
  - Optimize hot paths only
  - Use appropriate container types

# ---- File Structure ----
file_structure:
  - Headers in include/
  - Source in src/
  - Tests in tests/
  - One class per file
  - Group related functionality
  - Use header guards or #pragma once
  - Minimize header dependencies

# ---- CMake Best Practices ----
cmake:
  - Modern CMake practices
  - Target-based approach
  - Proper dependency management
  - Version requirements
  - Export compile commands
  - Proper install rules
  - Configure time checks

# ---- Testing ----
testing:
  - Unit tests for core functionality
  - Integration tests for systems
  - Test error conditions
  - Mock external dependencies
  - Clear test names and structure
  - One assertion per test
  - Test edge cases

# ---- Documentation ----
documentation:
  - Doxygen-style comments for public API
  - Clear function contracts
  - Document thread safety
  - Document ownership semantics
  - Keep README.md up to date
  - Document build requirements
  - Include usage examples
  - Do not make summary documents, just write the code.
  - DO NOT create new .md files unless absolutely necessary
  - DO NOT create new .sh files unless absolutely necessary
  - Prefer updating existing README.md over creating new documentation files
  - Use inline code comments over separate documentation files

# ---- Security ----
security:
  - Validate all inputs
  - Secure error messages
  - No buffer overflows
  - Safe string handling
  - Proper access control
  - No hardcoded credentials

# ---- Commit Messages ----
commit_messages:
  - Subject <= 50 chars, imperative mood
  - No trailing period
  - Keep messages concise and focused
  - Use conventional commits format (feat:, fix:, docs:, etc.)
  - Body <= 72 chars per line if needed
  - Reference issues where applicable

# ---- Collaboration ----
collaboration:
  - Review code before committing
  - Keep PRs focused and small
  - Document breaking changes
  - Update tests with changes
  - Clear PR descriptions
  - Address review comments